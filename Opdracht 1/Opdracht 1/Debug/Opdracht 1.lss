
Opdracht 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000001a0  00000214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000228  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000258  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000945  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000846  00000000  00000000  00000c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002fa  00000000  00000000  00001447  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001744  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000463  00000000  00000000  00001788  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fb  00000000  00000000  00001beb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001ce6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ea       	ldi	r30, 0xA0	; 160
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 31       	cpi	r26, 0x14	; 20
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	13 d0       	rcall	.+38     	; 0xda <main>
  b4:	73 c0       	rjmp	.+230    	; 0x19c <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
#include <avr/io.h>
#include <util/delay.h>

void wait( int ms )
{
	for (int i=0; i<ms; i++)
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	6c f4       	brge	.+26     	; 0xd8 <wait+0x20>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	e9 ef       	ldi	r30, 0xF9	; 249
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <wait+0xe>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <wait+0x14>
  cc:	00 00       	nop
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	82 17       	cp	r24, r18
  d4:	93 07       	cpc	r25, r19
  d6:	a9 f7       	brne	.-22     	; 0xc2 <wait+0xa>
  d8:	08 95       	ret

000000da <main>:
		_delay_ms(1);		// library function (max 30 ms at 8MHz)
	}
}

int main( void )
{
  da:	cf 93       	push	r28
  dc:	df 93       	push	r29
  de:	cd b7       	in	r28, 0x3d	; 61
  e0:	de b7       	in	r29, 0x3e	; 62
  e2:	6e 97       	sbiw	r28, 0x1e	; 30
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	f8 94       	cli
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	cd bf       	out	0x3d, r28	; 61
	DDRD = 0b11111111;
  ee:	8f ef       	ldi	r24, 0xFF	; 255
  f0:	81 bb       	out	0x11, r24	; 17
	char lampjes[10] = {1<<PD0,1<<PD1,1<<PD2,1<<PD3,1<<PD4,1<<PD5,1<<PD4,1<<PD3,1<<PD2,1<<PD1};
  f2:	8a e0       	ldi	r24, 0x0A	; 10
  f4:	e0 e0       	ldi	r30, 0x00	; 0
  f6:	f1 e0       	ldi	r31, 0x01	; 1
  f8:	de 01       	movw	r26, r28
  fa:	11 96       	adiw	r26, 0x01	; 1
  fc:	01 90       	ld	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	8a 95       	dec	r24
 102:	e1 f7       	brne	.-8      	; 0xfc <main+0x22>
	char lampjes2[10] = {1<<PD7,1<<PD6,1<<PD5,1<<PD4,1<<PD3,1<<PD2,1<<PD3,1<<PD4,1<<PD5,1<<PD6};
 104:	8a e0       	ldi	r24, 0x0A	; 10
 106:	ea e0       	ldi	r30, 0x0A	; 10
 108:	f1 e0       	ldi	r31, 0x01	; 1
 10a:	de 01       	movw	r26, r28
 10c:	1b 96       	adiw	r26, 0x0b	; 11
 10e:	01 90       	ld	r0, Z+
 110:	0d 92       	st	X+, r0
 112:	8a 95       	dec	r24
 114:	e1 f7       	brne	.-8      	; 0x10e <main+0x34>
	char lampjes3[10] = {1<<PC0,1<<PC1,1<<PC2,1<<PC3,1<<PC4,1<<PC5,1<<PC4,1<<PC3,1<<PC2,1<<PC1};
 116:	8a e0       	ldi	r24, 0x0A	; 10
 118:	e0 e0       	ldi	r30, 0x00	; 0
 11a:	f1 e0       	ldi	r31, 0x01	; 1
 11c:	de 01       	movw	r26, r28
 11e:	55 96       	adiw	r26, 0x15	; 21
 120:	01 90       	ld	r0, Z+
 122:	0d 92       	st	X+, r0
 124:	8a 95       	dec	r24
 126:	e1 f7       	brne	.-8      	; 0x120 <main+0x46>
 128:	8e 01       	movw	r16, r28
 12a:	0f 5f       	subi	r16, 0xFF	; 255
 12c:	1f 4f       	sbci	r17, 0xFF	; 255
 12e:	7e 01       	movw	r14, r28
 130:	8b e0       	ldi	r24, 0x0B	; 11
 132:	e8 0e       	add	r14, r24
 134:	f1 1c       	adc	r15, r1
 136:	6e 01       	movw	r12, r28
 138:	e5 e1       	ldi	r30, 0x15	; 21
 13a:	ce 0e       	add	r12, r30
 13c:	d1 1c       	adc	r13, r1
 13e:	47 01       	movw	r8, r14
	while(1){
		int i;
		for(i = 0; i < 10;i++){
			PORTD |= lampjes[i];
 140:	92 b3       	in	r25, 0x12	; 18
 142:	58 01       	movw	r10, r16
 144:	f8 01       	movw	r30, r16
 146:	81 91       	ld	r24, Z+
 148:	8f 01       	movw	r16, r30
 14a:	89 2b       	or	r24, r25
 14c:	82 bb       	out	0x12, r24	; 18
			PORTD |= lampjes2[i];
 14e:	92 b3       	in	r25, 0x12	; 18
 150:	37 01       	movw	r6, r14
 152:	f7 01       	movw	r30, r14
 154:	81 91       	ld	r24, Z+
 156:	7f 01       	movw	r14, r30
 158:	89 2b       	or	r24, r25
 15a:	82 bb       	out	0x12, r24	; 18
			PORTC |= lampjes3[i];
 15c:	95 b3       	in	r25, 0x15	; 21
 15e:	26 01       	movw	r4, r12
 160:	f6 01       	movw	r30, r12
 162:	81 91       	ld	r24, Z+
 164:	6f 01       	movw	r12, r30
 166:	89 2b       	or	r24, r25
 168:	85 bb       	out	0x15, r24	; 21
			wait(1000);
 16a:	88 ee       	ldi	r24, 0xE8	; 232
 16c:	93 e0       	ldi	r25, 0x03	; 3
 16e:	a4 df       	rcall	.-184    	; 0xb8 <wait>
			PORTD &= ~lampjes[i];
 170:	92 b3       	in	r25, 0x12	; 18
 172:	f5 01       	movw	r30, r10
 174:	80 81       	ld	r24, Z
 176:	80 95       	com	r24
 178:	89 23       	and	r24, r25
 17a:	82 bb       	out	0x12, r24	; 18
			PORTD &= ~lampjes2[i];
 17c:	92 b3       	in	r25, 0x12	; 18
 17e:	f3 01       	movw	r30, r6
 180:	80 81       	ld	r24, Z
 182:	80 95       	com	r24
 184:	89 23       	and	r24, r25
 186:	82 bb       	out	0x12, r24	; 18
			PORTC &= ~lampjes3[i];
 188:	95 b3       	in	r25, 0x15	; 21
 18a:	f2 01       	movw	r30, r4
 18c:	80 81       	ld	r24, Z
 18e:	80 95       	com	r24
 190:	89 23       	and	r24, r25
 192:	85 bb       	out	0x15, r24	; 21
	char lampjes[10] = {1<<PD0,1<<PD1,1<<PD2,1<<PD3,1<<PD4,1<<PD5,1<<PD4,1<<PD3,1<<PD2,1<<PD1};
	char lampjes2[10] = {1<<PD7,1<<PD6,1<<PD5,1<<PD4,1<<PD3,1<<PD2,1<<PD3,1<<PD4,1<<PD5,1<<PD6};
	char lampjes3[10] = {1<<PC0,1<<PC1,1<<PC2,1<<PC3,1<<PC4,1<<PC5,1<<PC4,1<<PC3,1<<PC2,1<<PC1};
	while(1){
		int i;
		for(i = 0; i < 10;i++){
 194:	08 15       	cp	r16, r8
 196:	19 05       	cpc	r17, r9
 198:	99 f6       	brne	.-90     	; 0x140 <main+0x66>
 19a:	c6 cf       	rjmp	.-116    	; 0x128 <main+0x4e>

0000019c <_exit>:
 19c:	f8 94       	cli

0000019e <__stop_program>:
 19e:	ff cf       	rjmp	.-2      	; 0x19e <__stop_program>
