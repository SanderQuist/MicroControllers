
Opdracht 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000946  00000000  00000000  00000280  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000843  00000000  00000000  00000bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000328  00000000  00000000  00001409  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001734  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000446  00000000  00000000  00001768  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000006a  00000000  00000000  00001bae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001c18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	53 c0       	rjmp	.+166    	; 0xac <__bad_interrupt>
   6:	00 00       	nop
   8:	51 c0       	rjmp	.+162    	; 0xac <__bad_interrupt>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	a2 30       	cpi	r26, 0x02	; 2
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	13 d0       	rcall	.+38     	; 0xd0 <main>
  aa:	64 c0       	rjmp	.+200    	; 0x174 <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <wait>:

int state;

void wait( int ms )
{
	for (int i=0; i<ms; i++)
  ae:	18 16       	cp	r1, r24
  b0:	19 06       	cpc	r1, r25
  b2:	6c f4       	brge	.+26     	; 0xce <wait+0x20>
  b4:	20 e0       	ldi	r18, 0x00	; 0
  b6:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b8:	e9 ef       	ldi	r30, 0xF9	; 249
  ba:	f0 e0       	ldi	r31, 0x00	; 0
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <wait+0xe>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <wait+0x14>
  c2:	00 00       	nop
  c4:	2f 5f       	subi	r18, 0xFF	; 255
  c6:	3f 4f       	sbci	r19, 0xFF	; 255
  c8:	82 17       	cp	r24, r18
  ca:	93 07       	cpc	r25, r19
  cc:	a9 f7       	brne	.-22     	; 0xb8 <wait+0xa>
  ce:	08 95       	ret

000000d0 <main>:
	}
}

int main( void )
{
	DDRD = 0b11111111;
  d0:	8f ef       	ldi	r24, 0xFF	; 255
  d2:	81 bb       	out	0x11, r24	; 17
	state = 1;
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	90 e0       	ldi	r25, 0x00	; 0
  d8:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
  dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		if(PINC & (1<<PC0) == 1 && state == 1){
			state = 2;
		}
		else if (PINC & (1<<PC0) ==1 && state == 2){
			state = 1;
  e0:	01 e0       	ldi	r16, 0x01	; 1
  e2:	10 e0       	ldi	r17, 0x00	; 0
	DDRD = 0b11111111;
	state = 1;
	while(1){
		
		if(PINC & (1<<PC0) == 1 && state == 1){
			state = 2;
  e4:	c2 e0       	ldi	r28, 0x02	; 2
  e6:	d0 e0       	ldi	r29, 0x00	; 0
{
	DDRD = 0b11111111;
	state = 1;
	while(1){
		
		if(PINC & (1<<PC0) == 1 && state == 1){
  e8:	98 9b       	sbis	0x13, 0	; 19
  ea:	0c c0       	rjmp	.+24     	; 0x104 <main+0x34>
  ec:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  f0:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	91 05       	cpc	r25, r1
  f8:	71 f5       	brne	.+92     	; 0x156 <main+0x86>
			state = 2;
  fa:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <_edata+0x1>
  fe:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <_edata>
 102:	20 c0       	rjmp	.+64     	; 0x144 <main+0x74>
		}
		else if (PINC & (1<<PC0) ==1 && state == 2){
 104:	98 9b       	sbis	0x13, 0	; 19
 106:	0c c0       	rjmp	.+24     	; 0x120 <main+0x50>
 108:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 10c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 110:	82 30       	cpi	r24, 0x02	; 2
 112:	91 05       	cpc	r25, r1
 114:	19 f5       	brne	.+70     	; 0x15c <main+0x8c>
			state = 1;
 116:	10 93 01 01 	sts	0x0101, r17	; 0x800101 <_edata+0x1>
 11a:	00 93 00 01 	sts	0x0100, r16	; 0x800100 <_edata>
 11e:	07 c0       	rjmp	.+14     	; 0x12e <main+0x5e>
		
		}
		 if(state == 1){
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 124:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 128:	81 30       	cpi	r24, 0x01	; 1
 12a:	91 05       	cpc	r25, r1
 12c:	49 f4       	brne	.+18     	; 0x140 <main+0x70>
				 PORTD |= (1<<PD7);
 12e:	97 9a       	sbi	0x12, 7	; 18
				 wait(1000);
 130:	88 ee       	ldi	r24, 0xE8	; 232
 132:	93 e0       	ldi	r25, 0x03	; 3
 134:	bc df       	rcall	.-136    	; 0xae <wait>
				 PORTD &= ~(1<<PD7);
 136:	97 98       	cbi	0x12, 7	; 18
				 wait(1000);
 138:	88 ee       	ldi	r24, 0xE8	; 232
 13a:	93 e0       	ldi	r25, 0x03	; 3
 13c:	b8 df       	rcall	.-144    	; 0xae <wait>
 13e:	d4 cf       	rjmp	.-88     	; 0xe8 <main+0x18>
				 
		
		}else if(state == 2){
 140:	02 97       	sbiw	r24, 0x02	; 2
 142:	91 f6       	brne	.-92     	; 0xe8 <main+0x18>
		
			PORTD |= (1<<PD7);
 144:	97 9a       	sbi	0x12, 7	; 18
			wait(4000);
 146:	80 ea       	ldi	r24, 0xA0	; 160
 148:	9f e0       	ldi	r25, 0x0F	; 15
 14a:	b1 df       	rcall	.-158    	; 0xae <wait>
			PORTD &= ~(1<<PD7);
			wait(4000);
 14c:	97 98       	cbi	0x12, 7	; 18
 14e:	80 ea       	ldi	r24, 0xA0	; 160
 150:	9f e0       	ldi	r25, 0x0F	; 15
 152:	ad df       	rcall	.-166    	; 0xae <wait>
 154:	c9 cf       	rjmp	.-110    	; 0xe8 <main+0x18>
	while(1){
		
		if(PINC & (1<<PC0) == 1 && state == 1){
			state = 2;
		}
		else if (PINC & (1<<PC0) ==1 && state == 2){
 156:	98 99       	sbic	0x13, 0	; 19
 158:	05 c0       	rjmp	.+10     	; 0x164 <main+0x94>
 15a:	f2 cf       	rjmp	.-28     	; 0x140 <main+0x70>
			state = 1;
		
		}
		 if(state == 1){
 15c:	01 97       	sbiw	r24, 0x01	; 1
 15e:	09 f0       	breq	.+2      	; 0x162 <main+0x92>
 160:	c3 cf       	rjmp	.-122    	; 0xe8 <main+0x18>
 162:	e5 cf       	rjmp	.-54     	; 0x12e <main+0x5e>
	while(1){
		
		if(PINC & (1<<PC0) == 1 && state == 1){
			state = 2;
		}
		else if (PINC & (1<<PC0) ==1 && state == 2){
 164:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 168:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 16c:	02 97       	sbiw	r24, 0x02	; 2
 16e:	09 f0       	breq	.+2      	; 0x172 <main+0xa2>
 170:	bb cf       	rjmp	.-138    	; 0xe8 <main+0x18>
 172:	d1 cf       	rjmp	.-94     	; 0x116 <main+0x46>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
